<project name="solr-couchbase-plugin"
         xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>Solr Couchbase plugin</description>

  <property file="build.properties"/>

  <path id="libs">
    <fileset dir="${lib.dir}" includes="**/*" />
    <fileset dir="${build-lib.dir}" includes="*" />
  </path>




  <target name="ivy-download" unless="ivy.jar.exists">
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
         dest="${build-lib.dir}/ivy-${ivy.version}.jar"
         usetimestamp="true"/>
  </target>

  <target name="ivy-init" depends="ivy-download" unless="skip.ivy" description="initialize ivy">
    <path id="ivy.lib.path">
      <fileset dir="${build-lib.dir}" includes="ivy-${ivy.version}.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:settings file="${ivy.dir}/ivysettings.xml"/>
  </target>
  
  <target name="ant-download" depends="ivy-init" unless="ant.exists">
    <mkdir dir="${ant.dir}"/>
    <ivy:retrieve
        organisation="org.apache.ant"
        module="ant"
        revision="1.9.2"
        pattern="${ant.dir}/[artifact]-[revision].[ext]"
        inline="true"
        conf="default"/>
    <ivy:retrieve
        organisation="ant"
        module="optional"
        revision="1.5.4"
        pattern="${ant.dir}/[artifact]-[revision].[ext]"
        inline="true"
        conf="default"/>
  </target>

  <macrodef name="ivy-resolve-conf">
    <attribute name="conf"/>
    <attribute name="file"/>
    <attribute name="lib.dir"/>
    <attribute name="report.dir"/>
    <sequential>
      <echo>Resolving ivy conf: @{conf} for lib.dir: @{lib.dir} in module ${ant.project.name}</echo>
      <ivy:resolve conf="@{conf}" file="@{file}" log="download-only"/>
      <ivy:report conf="@{conf}" todir="@{report.dir}"/>
      <ivy:retrieve conf="@{conf}" pattern="@{lib.dir}/@{conf}/[artifact]-[revision].[ext]"/>
    </sequential>
  </macrodef>
  
  <target name="ivy-resolve-compile" depends="ivy-init, ant-download, init" description="fetch dependencies with ivy" unless="compile.resolved">
    <ivy-resolve-conf conf="compile" file="${basedir}/ivy.xml" lib.dir="${lib.dir}" report.dir="${build.dir}/ivy-report" />
    <property name="compile.resolved" value="true" />
  </target>
  
  <target name="ivy-resolve-jetty" depends="ivy-init, ant-download, init" description="fetch dependencies with ivy" unless="runtime.resolved">
    <ivy-resolve-conf conf="jetty" file="${basedir}/ivy.xml" lib.dir="${lib.dir}" report.dir="${build.dir}/ivy-report" />
    <property name="jetty.resolved" value="true" />
  </target>
  
  <target name="ivy-resolve-runtime" depends="ivy-init, ant-download, init" description="fetch dependencies with ivy" unless="runtime.resolved">
    <ivy-resolve-conf conf="runtime" file="${basedir}/ivy.xml" lib.dir="${lib.dir}" report.dir="${build.dir}/ivy-report" />
    <property name="runtime.resolved" value="true" />
  </target>

  <target name="ivy-report" depends="ivy-init" description="generate Ivy reports for all confs">
    <!--<fail message="apollo.version not set" unless="${apollo.version}"/>-->

    <ivy:resolve conf="*" log="download-only"/>
    <ivy:report conf="*" todir="${build.dir}/ivy-report"/>
  </target>
  
  <target name="clean" description="Cleans build/ and lib/ directories of this project">
    <delete dir="${build.dir}" />
    <delete dir="${lib.dir}" />
  </target>
  
  <target name="clean-solr" description="Cleans solr/ directory with exception for solr/dist/">
    <delete>
      <fileset dir="${solr.dir}">
        <exclude name="dist/**/*"/>
        <include name="**/*"/>
      </fileset>
    </delete>
  </target>
  
  <target name="init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${lib.dir}"/>
  </target>
  
  <target name="compile" depends="ivy-resolve-compile">
    <echo>${basedir}</echo>
    <mkdir dir="${classes.dir}"/>
    <echo>Sources: ${sources.dir}</echo>
    <javac srcdir="${sources.dir}"
           source="${javac.source}"
           target="${javac.target}"
           debug="${debug}"
           encoding="UTF-8"
           destdir="${classes.dir}">
      <classpath>
        <path refid="libs"/>
      </classpath>
    </javac>
    <copy todir="${classes.dir}" failonerror="false">
      <fileset dir="src/main/resources" includes="**" />
    </copy>
  </target>
  
  <target name="jar" description="Jar this project" depends="compile">
    <jar destfile="${build.dir}/${ant.project.name}-${solr.couchbase.plugin.version}.jar">
      <fileset dir="${classes.dir}" />
      <manifest>
          <attribute name="Built-By" value="${user.name}"/>
         <!-- Information about the program itself -->
         <attribute name="Implementation-Vendor" value="LucidWorks, Inc."/>
         <attribute name="Specification-Title" value="${ant.project.name}"/>
         <attribute name="Implementation-Title" value="${ant.project.name}"/>
         <attribute name="Implementation-Version" value="${solr.couchbase.plugin.version}"/>
       </manifest>
    </jar>
  </target>
  
  <target name="solr-check">
    <mkdir dir="${solr.dir}/dist" />
    <available file="${solr.dir}/dist/solr-${solr.version}.zip" property="solrzip.exists"/>
    <echo>solrzip.exists=${solrzip.exists}</echo>
  </target>

  <target name="get-solr" unless="solrzip.exists" depends="solr-check">
    <get src="http://archive.apache.org/dist/lucene/solr/${solr.version}/solr-${solr.version}.zip"
                dest="${solr.dir}/dist/solr-${solr.version}.zip"/>
  </target>

  <target name="prep-solr" depends="ivy-init, get-solr, jar, ivy-resolve-jetty, ivy-resolve-runtime" unless="solr.prep.skip">
    <prep-solr solr.dir="${solr.dir}" solr.version="${solr.version}"/>
  </target>
  
  <macrodef name="prep-solr">
    <attribute name="solr.dir"/>
    <attribute name="solr.version"/>
    <sequential>
      <echo>Unpacking Solr @{solr.version} into @{solr.dir} from module ${ant.project.name}</echo>

      <unzip src="${solr.dir}/dist/solr-@{solr.version}.zip" dest="@{solr.dir}">
        <patternset>
          <include name="solr-@{solr.version}/example/contexts/**"/>
          <include name="solr-@{solr.version}/example/**"/>
          <include name="solr-@{solr.version}/example/etc/**"/>
          <include name="solr-@{solr.version}/example/resources/**"/>
          <include name="solr-@{solr.version}/example/solr/**"/>
          <include name="solr-@{solr.version}/example/start.jar"/>
        </patternset>
        <mapper>
          <globmapper from="solr-@{solr.version}/example/*" to="*"/>
        </mapper>
      </unzip>
      
      <mkdir dir="${solr.sharedlib.dir}"/>
      <copy todir="${solr.sharedlib.dir}">
        <!--<fileset dir="${build-lib.dir}" includes="couchbase-capi-server-${couchbase-capi-server.version}.jar"/>-->
        <fileset dir="${build.dir}" includes="${ant.project.name}-${solr.couchbase.plugin.version}.jar"/>
        <fileset dir="${lib.dir}/jetty" includes="*"/>
        <fileset dir="${lib.dir}/runtime" includes="*"/>
      </copy>
      
      <delete dir="${solr.dir}/solr-war"/>
      <mkdir dir="${solr.dir}/solr-war"/>
      <unwar src="${solr.dir}/webapps/solr.war" dest="${solr.dir}/solr-war">
        <patternset>
          <include name="**/*"/>
        </patternset>
      </unwar>
      <delete file="${solr.dir}/solr-war/WEB-INF/lib/commons-io-2.1.jar"/>
      <copy todir="${solr.dir}/solr-war/WEB-INF/lib">
        <fileset dir="${lib.dir}/runtime" includes="commons-io-2.4.jar"/>
      </copy>
      <war destfile="${solr.dir}/solr-war/solr.war" webxml="${solr.dir}/solr-war/WEB-INF/web.xml">
        <fileset dir="${solr.dir}/solr-war">
          <include name="**/*" />
        </fileset>
      </war>
      <delete file="${solr.dir}/webapps/solr.war" />
      <copy todir="${solr.dir}/webapps">
        <fileset file="${solr.dir}/solr-war/solr.war"/>
      </copy>
    </sequential>
  </macrodef>
  
  <target name="patch-solrconfig-check">
    <echo message="checking ${solr.conf.overrides.dir}/solrconfig.xml.patch"/>
    <available file="${solr.conf.overrides.dir}/solrconfig.xml.patch" property="solrconfig.xml.patch.exists"/>
  </target>
  
  <target name="patch-solr-check">
    <echo message="checking ${solr.conf.overrides.dir.dir}/solr.xml.patch"/>
    <available file="${solr.conf.overrides.dir}/solr.xml.patch" property="solr.xml.patch.exists"/>
  </target>

  <target name="patch-solrconfig-xml" if="solrconfig.xml.patch.exists" depends="patch-solrconfig-check, prep-solr">
    <exec executable="dos2unix">
      <arg value="${solr.dir}/solr/collection1/conf/solrconfig.xml"/>
    </exec>
    <patch
      patchfile="${solr.conf.overrides.dir}/solrconfig.xml.patch"
      originalfile="${solr.dir}/solr/collection1/conf/solrconfig.xml"
      ignorewhitespace="true"
      failonerror="true" />
  </target>
  
  <target name="patch-solr-xml" if="solr.xml.patch.exists" depends="patch-solr-check, prep-solr">
    <exec executable="dos2unix">
      <arg value="${solr.run.dir}/solr.xml"/>
    </exec>
    <patch
      patchfile="${solr.conf.overrides.dir}/solr.xml.patch"
      originalfile="${solr.run.dir}/solr.xml"
      ignorewhitespace="true"
      failonerror="true" />
  </target>

  <target name="run-solr" description="Run interactive Solr" depends="prep-solr, patch-solr-xml, patch-solrconfig-xml">
    <delete dir="${solr.dir}/solr-webapp/webapp"/>

    <java dir="${solr.dir}" jar="${solr.dir}/start.jar" fork="true" failonerror="true">
      <jvmarg line="-Djava.awt.headless=true"/>
      <jvmarg line="-Xmx${heap.size}"/>
      <jvmarg line="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n"/>
      <sysproperty key="jetty.port" value="${solr.port}"/>
      <sysproperty key="STOP.PORT" value="${solr.stop.port}"/>
      <sysproperty key="STOP.KEY" value="srsly.stop"/>
    </java>
  </target>
</project>