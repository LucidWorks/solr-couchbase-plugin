<project name="solr-couchbase-plugin"
         default="dist"
         xmlns:ivy="antlib:org.apache.ivy.ant">
  
  <description>Solr Couchbase plugin</description>

  <property file="build.properties"/>

  <path id="libs">
    <fileset dir="${lib.dir}" includes="**/*" />
    <fileset dir="${build-lib.dir}" includes="*" />
  </path>




  <target name="ivy-download" depends="init" unless="ivy.jar.exists">
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
         dest="${build-lib.dir}/ivy-${ivy.version}.jar"
         usetimestamp="true"/>
  </target>

  <target name="ivy-init" depends="ivy-download" unless="skip.ivy" description="initialize ivy">
    <path id="ivy.lib.path">
      <fileset dir="${build-lib.dir}" includes="ivy-${ivy.version}.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:settings file="${ivy.dir}/ivysettings.xml"/>
  </target>
  
  <target name="ant-download" depends="ivy-init" unless="ant.exists">
    <mkdir dir="${ant.dir}"/>
    <ivy:retrieve
        organisation="org.apache.ant"
        module="ant"
        revision="1.9.2"
        pattern="${ant.dir}/[artifact]-[revision].[ext]"
        inline="true"
        conf="default"/>
    <ivy:retrieve
        organisation="ant"
        module="optional"
        revision="1.5.4"
        pattern="${ant.dir}/[artifact]-[revision].[ext]"
        inline="true"
        conf="default"/>
  </target>

  <macrodef name="ivy-resolve-conf">
    <attribute name="conf"/>
    <attribute name="file"/>
    <attribute name="lib.dir"/>
    <attribute name="report.dir"/>
    <sequential>
      <echo>Resolving ivy conf: @{conf} for lib.dir: @{lib.dir} in module ${ant.project.name}</echo>
      <ivy:resolve conf="@{conf}" file="@{file}" log="download-only"/>
      <ivy:report conf="@{conf}" todir="@{report.dir}"/>
      <ivy:retrieve conf="@{conf}" pattern="@{lib.dir}/@{conf}/[artifact]-[revision].[ext]"/>
    </sequential>
  </macrodef>
  
  <target name="ivy-resolve-compile" depends="ivy-init, ant-download, init" description="fetch dependencies with ivy" unless="compile.resolved">
    <ivy-resolve-conf conf="compile" file="${basedir}/ivy.xml" lib.dir="${lib.dir}" report.dir="${build.dir}/ivy-report" />
    <property name="compile.resolved" value="true" />
  </target>
  
  <target name="ivy-resolve-jetty" depends="ivy-init, ant-download, init" description="fetch dependencies with ivy" unless="jetty.resolved">
    <ivy-resolve-conf conf="jetty" file="${basedir}/ivy.xml" lib.dir="${lib.dir}" report.dir="${build.dir}/ivy-report" />
    <property name="jetty.resolved" value="true" />
  </target>
  
  <target name="ivy-resolve-solr-jetty" depends="ivy-init, ant-download, init" description="fetch dependencies with ivy" unless="solr.jetty.resolved">
    <ivy-resolve-conf conf="solr.jetty" file="${basedir}/ivy.xml" lib.dir="${lib.dir}" report.dir="${build.dir}/ivy-report" />
    <property name="solr.jetty.resolved" value="true" />
  </target>
  
  <target name="ivy-resolve-runtime" depends="ivy-init, ant-download, init" description="fetch dependencies with ivy" unless="runtime.resolved">
    <ivy-resolve-conf conf="runtime" file="${basedir}/ivy.xml" lib.dir="${lib.dir}" report.dir="${build.dir}/ivy-report" />
    <property name="runtime.resolved" value="true" />
  </target>

  <target name="ivy-report" depends="ivy-init" description="generate Ivy reports for all confs">
    <ivy:resolve conf="*" log="download-only"/>
    <ivy:report conf="*" todir="${build.dir}/ivy-report"/>
  </target>
  
  <target name="clean" description="Cleans build/ and lib/ directories of this project">
    <delete dir="${build.dir}" />
    <delete dir="${lib.dir}" />
  </target>
  
  <target name="clean-build-lib">
    <delete dir="${build-lib.dir}"/>
  </target>
    
  <target name="clean-solr" description="Cleans solr/ directory with exception for solr/dist/">
    <delete>
      <fileset dir="${solr.dir}">
        <exclude name="dist/**/*"/>
        <include name="**/*"/>
      </fileset>
    </delete>
  </target>
  
  <target name="init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${build-lib.dir}"/>
  </target>
  
  <target name="compile" depends="ivy-resolve-compile">
    <echo>${basedir}</echo>
    <mkdir dir="${classes.dir}"/>
    <echo>Sources: ${sources.dir}</echo>
    <javac srcdir="${sources.dir}"
           source="${javac.source}"
           target="${javac.target}"
           debug="${debug}"
           encoding="UTF-8"
           destdir="${classes.dir}">
      <classpath>
        <path refid="libs"/>
      </classpath>
    </javac>
    <copy todir="${classes.dir}" failonerror="false">
      <fileset dir="src/main/resources" includes="**" />
    </copy>
  </target>
  
  <target name="jar" description="Jar this project" depends="compile">
    <jar destfile="${build.dir}/${ant.project.name}-${solr.couchbase.plugin.version}.jar">
      <fileset dir="${classes.dir}" />
      <manifest>
          <attribute name="Built-By" value="${user.name}"/>
         <!-- Information about the program itself -->
         <attribute name="Implementation-Vendor" value="Apache"/>
         <attribute name="Specification-Title" value="${ant.project.name}"/>
         <attribute name="Implementation-Title" value="${ant.project.name}"/>
         <attribute name="Implementation-Version" value="${solr.couchbase.plugin.version}"/>
       </manifest>
    </jar>
  </target>
  
  <target name="solr-check">
    <mkdir dir="${build-lib.dir}"/>
    <available file="${build-lib.dir}/solr-${solr.server.version}.zip" property="solrzip.exists"/>
    <echo>solrzip.exists=${solrzip.exists}</echo>
  </target>

  <target name="get-solr" unless="solrzip.exists" depends="solr-check">
    <get src="http://ftp.ps.pl/pub/apache/lucene/solr/${solr.server.version}/solr-${solr.server.version}.zip"
                dest="${build-lib.dir}/solr-${solr.server.version}.zip"/>
  </target>
  
  <target name="zk-check">
    <available file="${build-lib.dir}/zookeeper-${zk.version}.tar.gz" property="zk.tar.exists"/>
    <echo>zk.tar.exists=${zk.tar.exists}</echo>
  </target>
  
  <target name="get-zk" unless="zk.tar.exists" depends="zk-check">
    <get src="http://ftp.piotrkosoft.net/pub/mirrors/ftp.apache.org/zookeeper/stable/zookeeper-${zk.version}.tar.gz"
      dest="${build-lib.dir}/zookeeper-${zk.version}.tar.gz"/>
  </target>
  
  <target name="prep-solr" depends="ivy-init, get-solr, jar, ivy-resolve-jetty, ivy-resolve-solr-jetty, ivy-resolve-runtime" >
    <prep-solr solr.zip.dir="${exploded.solr.zip.dir}" solr.version="${solr.server.version}"/>
  </target>
  
  <macrodef name="prep-solr">
    <attribute name="solr.zip.dir"/>
    <attribute name="solr.version"/>
    <sequential>
      <echo>Unpacking Solr @{solr.version} into @{solr.zip.dir} from module ${ant.project.name}</echo>
      
      <!-- unzip Solr -->
      <unzip src="${build-lib.dir}/solr-@{solr.version}.zip" dest="@{solr.zip.dir}">
        <mapper>
          <globmapper from="solr-@{solr.version}/*" to="*"/>
        </mapper>
      </unzip>
      
      <!-- copy Solr war -->
      <copy todir="${solr.war.dir}">
        <!--<fileset dir="${solr.dir}/example/webapps/" includes="solr.war"/>-->
        <fileset dir="@{solr.zip.dir}/server/webapps/" includes="solr.war"/>
      </copy>
      <chmod file="@{solr.zip.dir}/bin/solr" perm="755"/>
    	
      <!-- explode Solr war -->
      <unwar src="${solr.war.dir}/solr.war" dest="${exploded.solr.war.dir}">
      </unwar>
    
      <!-- copy Solr logging libs -->
      <ivy:resolve conf="solr.logging" file="${basedir}/ivy.xml" log="download-only"/>
      <ivy:retrieve conf="solr.logging" pattern="${exploded.solr.war.dir}/WEB-INF/lib/[artifact]-[revision].[ext]"/>
      
      <!-- copy Solr config -->
      <copy todir="${solr.dir}">
        <fileset dir="@{solr.zip.dir}/server/solr/" includes="**"/>
      </copy>
    
      <!-- Copy jetty-runner -->
      <ivy:resolve conf="solr.jetty.runner" file="${basedir}/ivy.xml" log="download-only"/>
      <ivy:retrieve conf="solr.jetty.runner" pattern="${solr.dir}/[artifact]-[revision].[ext]"/>
    
      <!-- copy project libs -->
      <copy todir="${exploded.solr.war.dir}/WEB-INF/lib">
        <fileset dir="${lib.dir}/runtime" includes="*.jar"/>
        <fileset dir="${lib.dir}/solr.jetty" includes="*.jar"/>
        <fileset dir="${build.dir}" includes="${ant.project.name}-${solr.couchbase.plugin.version}.jar"/>
      </copy>
    </sequential>
  </macrodef>
  
  <target name="patch-solr" depends="check-patches-exist, prep-solr">
    <patch-solr original.file="${solr.dir}/solr.xml" patch.file="${solr.conf.overrides.dir}/solr.xml.patch"/>
    <patch-solr original.file="${solr.dir}/configsets/basic_configs/conf/solrconfig.xml" patch.file="${solr.conf.overrides.dir}/solrconfig.xml.patch"/>
    <patch-solr original.file="${solr.dir}/configsets/data_driven_schema_configs/conf/solrconfig.xml" patch.file="${solr.conf.overrides.dir}/solrconfig.xml.patch"/>
    <patch-solr original.file="${solr.dir}/configsets/sample_techproducts_configs/conf/solrconfig.xml" patch.file="${solr.conf.overrides.dir}/solrconfig.xml.patch"/>
  </target>

  <target name="run-solr" description="Run interactive Solr" depends="prep-solr, patch-solr">
    <!--<delete dir="${solr.dir}/solr-webapp/webapp"/>-->
    <echo message="Starting standalone Solr, logging to ${build.dir}/solr-standalone/jetty.stderrout.log"></echo>
    <java dir="${solr.dir}" jar="${solr.dir}/jetty-runner-${jetty.runner.version}.jar" fork="true" spawn="true">
      <jvmarg line="${solr.jvm.args}"/>
      <jvmarg line="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n"/>
      <arg line="--port ${solr.port}"/>
      <arg line="--stop-port ${solr.stop.port}"/>
      <arg line="--stop-key STOP.SOLR"/>
      <arg line="--path /solr"/>
      <arg line="--log ${solr.dir}/jetty.request.log"/>
      <arg line="--out ${solr.dir}/jetty.stderrout.log"/>
      <arg value="${exploded.solr.war.dir}"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="solr.solr.home" value="${solr.dir}"/>
      <sysproperty key="host" value="localhost"/>
      <sysproperty key="jetty.port" value="${solr.port}"/>
    </java>
  </target>

  <target name="wait-for-solr" depends="run-solr">
    <waitfor maxwait="${solrStartupMaxWaitSeconds}" maxwaitunit="second" timeoutproperty="solrStandaloneStartupTimeout">
      <and>
        <socket server="localhost" port="${solr.port}"/>
        <http url="http://localhost:${solr.port}/solr"/>
        <http url="http://localhost:${solr.port}/solr/admin/info/system"/>
      </and>
    </waitfor>
  </target>

  <target name="start-solr-standalone" depends="wait-for-solr">
  <!-- create default core -->
    <copy todir="${solr.dir}/collection1">
      <fileset dir="${solr.dir}/configsets/sample_techproducts_configs/" includes="**"/>
    </copy>
    <condition property="createCoreStatus" value="true">
      <http url="http://localhost:${solr.port}/solr/admin/cores?action=CREATE&amp;name=collection1&amp;instanceDir=collection1"/>
    </condition>
  </target>


  <target name="stop">
    <exec dir="${exploded.solr.zip.dir}" executable="bin/solr">
      <arg line="stop -p ${solr.port}" />
    </exec>
  </target>

  <!-- Stop two standalone Solr -->
  <target name="stop-solr-standalone">
    <!-- Stop second server -->
    <java dir="${solr.dir}" jar="${solr.dir}/jetty-runner-${jetty.runner.version}.jar" fork="true" spawn="true">
      <jvmarg line="-Djava.awt.headless=true"/>
      <sysproperty key="solr.solr.home" value="${solr.dir}"/>
      <sysproperty key="STOP.PORT" value="${solr.stop.port}"/>
      <sysproperty key="STOP.KEY" value="STOP.SOLR"/>
      <!--<arg value="- -stop"/>-->
    </java>
    <echo message="Jetty stop command `java -jar ${solr.dir}/jetty-runner-${jetty.runner.version}.jar -DSTOP.PORT=${solr.stop.port} -DSTOP.KEY=STOP.SOLR --stop` command returned: ${jetty.stop.result}"/>

  <!--
    <sleep seconds="10"/>
    <sequential>
      <waitfor maxwait="120" maxwaitunit="second" timeoutproperty="timeout">
        <not>
          <or>
            <socket server="localhost" port="${solr.port}"/>
            <socket server="localhost" port="${solr.stop.port}"/>
          </or>
        </not>
      </waitfor>
      <fail if="timeout" message="Solr standalone failed to shutdown in 120 seconds"/>
    </sequential>
    -->
  </target>
  
  <!-- Run two node SolrCloud cluster -->
  <!----><target name="run-solr-cloud" description="Run interactive SolrCloud">
    <parallel>
      <antcall target="run-solr-cloud-1"/>
      <antcall target="run-solr-cloud-2"/>
      <antcall target="wait-and-test-zk"/>
    </parallel>
  </target>
  
  <target name="prep-solr-cloud" depends="get-solr, ivy-init, jar, ivy-resolve-runtime, ivy-resolve-jetty, ivy-resolve-solr-jetty">
    <prep-solr solr.dir="${solr.cloud.dir.1}" solr.version="${solr.server.version}"/>
    <prep-solr solr.dir="${solr.cloud.dir.2}" solr.version="${solr.server.version}"/>
    <!--3rd node for failover testing-->
    <!--<prep-solr solr.dir="${solr.cloud.dir.3}" solr.version="${solr.server.version}"/>-->
  </target>
  
  <macrodef name="patch-solr">
    <attribute name="original.file"/>
    <attribute name="patch.file"/>
    <sequential>
      <fixcrlf file="@{original.file}"
               eol="lf" eof="remove" />
      <patch
        patchfile="@{patch.file}"
        originalfile="@{original.file}"
        ignorewhitespace="true"
        failonerror="true" />
    </sequential>
  </macrodef>
  
  <target name="check-patches-exist">
    <condition property="patches.exist">
      <and>
        <available file="${solr.conf.overrides.dir}/solrconfig.xml.patch"/>
        <available file="${solr.conf.overrides.dir}/solr.xml.patch"/>
      </and>
    </condition>
  </target>
  
  <target name="patch-solr-cloud" if="patches.exist" depends="check-patches-exist, prep-solr-cloud">
    <patch-solr original.file="${solr.cloud.dir.1}/solr/solr.xml" patch.file="${solr.conf.overrides.dir}/solr.xml.patch"/>
    <patch-solr original.file="${solr.cloud.dir.2}/solr/solr.xml" patch.file="${solr.conf.overrides.dir}/solr.xml.patch"/>
    <!--<patch-solr original.file="${solr.cloud.dir.3}/solr/solr.xml" patch.file="${solr.conf.overrides.dir}/solr.xml.patch"/>-->
    <patch-solr original.file="${solr.cloud.dir.1}/solr/collection1/conf/solrconfig.xml" patch.file="${solr.conf.overrides.dir}/solrconfig.xml.patch"/>
    <patch-solr original.file="${solr.cloud.dir.2}/solr/collection1/conf/solrconfig.xml" patch.file="${solr.conf.overrides.dir}/solrconfig.xml.patch"/>
    <!--<patch-solr original.file="${solr.cloud.dir.3}/solr/collection1/conf/solrconfig.xml" patch.file="${solr.conf.overrides.dir}/solrconfig.xml.patch"/>-->
  </target>

  <target name="solr-cloud" depends="prep-solr-cloud, patch-solr-cloud" description="Install and run interactively SolrCloud cluster">
    <parallel>
      <antcall target="run-solr-cloud-1"/>
      <antcall target="run-solr-cloud-2"/>
      <!--<antcall target="run-solr-cloud-3"/>-->

      <!-- Wait for 120 seconds for each to come up -->
      <sequential>
        <echo message="SolrCloud is starting"/>
        <waitfor maxwait="120" maxwaitunit="second" timeoutproperty="timeout">
          <and>
            <socket server="localhost" port="${solr.cloud.port.1}"/>
<!--            <socket server="localhost" port="${solr.cloud.stop.port.1}"/> -->
            <socket server="localhost" port="${solr.cloud.port.2}"/>
<!--            <socket server="localhost" port="${solr.cloud.stop.port.2}"/> -->
<!--            <socket server="localhost" port="${solr.cloud.zk.port}"/> -->
            <http url="http://localhost:${solr.cloud.port.1}/solr"/>
            <http url="http://localhost:${solr.cloud.port.2}/solr"/>
            <http url="http://localhost:${solr.cloud.port.1}/solr/collection1/admin/ping?distrib=true"/>
            <http url="http://localhost:${solr.cloud.port.2}/solr/collection1/admin/ping?distrib=true"/>
          </and>
        </waitfor>
        <fail if="timeout" message="SolrCloud failed to startup in 120 seconds"/>
        <echo message="SolrCloud finished starting"/>
      </sequential>
    </parallel>
  </target>

  <!-- Stop two node SolrCloud cluster -->
  <target name="stop-solr-cloud">
    <!-- Stop second server -->
    <java dir="${solr.cloud.dir.2}" jar="${solr.cloud.dir.2}/jetty-start.jar" fork="true" failonerror="false" resultproperty="jetty.stop.result.2">
      <jvmarg line="-Djava.awt.headless=true"/>
      <sysproperty key="STOP.PORT" value="${solr.cloud.stop.port.2}"/>
      <sysproperty key="STOP.KEY" value="srsly.stop"/>
      <arg value="--stop"/>
    </java>
    <echo message="Jetty stop command `java -jar ${solr.cloud.dir.2}/jetty-start.jar -DSTOP.PORT=${solr.cloud.stop.port.2} -DSTOP.KEY=srsly.stop --stop` command returned: ${jetty.stop.result.2}"/>

    <!-- wait for the node w/o zk to shut down first -->
    <sleep seconds="10"/>
    
    <!-- Stop first server -->
    <java dir="${solr.cloud.dir.1}" jar="${solr.cloud.dir.1}/jetty-start.jar" fork="true" failonerror="false" resultproperty="jetty.stop.result.1">
      <jvmarg line="-Djava.awt.headless=true"/>
      <sysproperty key="STOP.PORT" value="${solr.cloud.stop.port.1}"/>
      <sysproperty key="STOP.KEY" value="srsly.stop"/>
      <arg value="--stop"/>
    </java>
    <echo message="Jetty stop command `java -jar ${solr.cloud.dir.1}/jetty-start.jar -DSTOP.PORT=${solr.cloud.stop.port.1} -DSTOP.KEY=srsly.stop --stop` command returned: ${jetty.stop.result.1}"/>
    
    <sequential>
      <waitfor maxwait="120" maxwaitunit="second" timeoutproperty="timeout">
        <not>
          <or>
            <socket server="localhost" port="${solr.cloud.port.1}"/>
            <socket server="localhost" port="${solr.cloud.stop.port.1}"/>
            <socket server="localhost" port="${solr.cloud.port.2}"/>
            <socket server="localhost" port="${solr.cloud.stop.port.2}"/>
            <socket server="localhost" port="${solr.cloud.zk.port}"/>
          </or>
        </not>
      </waitfor>
      <fail if="timeout" message="SolrCloud failed to shutdown in 120 seconds"/>
    </sequential>
    
  </target>

  <condition property="zk.host.args" value="-DzkHost=localhost:${solr.cloud.zk.port}" else="-DzkRun=localhost:${solr.cloud.zk.port}">
    <isset property="zk.standalone"/>
  </condition>
  
  <target name="run-solr-cloud-1">
    <tstamp>
      <format property="start.time" pattern="yyyy-MM-dd'T'hh:mm:ss"/>
    </tstamp>
    <property name="solr.log.1" location="${solr.cloud.dir.1}/solr-${start.time}.log"/>
    <echo message="Starting SolrCloud 1 on ${solr.cloud.port.1}, logging to ${solr.log.1}"/>
    <java dir="${solr.cloud.dir.1}" jar="${solr.cloud.dir.1}/jetty-start.jar" fork="true" failonerror="true" output="${solr.log.1}">
      <jvmarg line="-Djava.awt.headless=true"/>
      <jvmarg line="-Xmx${heap.size}"/>
      <jvmarg line="${zk.host.args}"/>
      
      <jvmarg line="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n"/>
      <jvmarg line="-Dhost=localhost -DnumShards=${solr.cloud.num.shards} -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=default"/>
      <sysproperty key="jetty.port" value="${solr.cloud.port.1}"/>
      <sysproperty key="STOP.PORT" value="${solr.cloud.stop.port.1}"/>
      <sysproperty key="STOP.KEY" value="srsly.stop"/>
    </java>
  </target>


  <target name="run-solr-cloud-2">
    <sleep seconds="10"/>
    <!-- Give the leader a head start -->
    <tstamp>
      <format property="start.time" pattern="yyyy-MM-dd'T'hh:mm:ss"/>
    </tstamp>
    <property name="solr.log.2" location="${solr.cloud.dir.2}/solr-${start.time}.log"/>
    <echo message="Starting SolrCloud 2 on ${solr.cloud.port.2}, logging to ${solr.log.2}"/>
    <java dir="${solr.cloud.dir.2}" jar="${solr.cloud.dir.2}/jetty-start.jar" fork="true" failonerror="true" output="${solr.log.2}">
      <jvmarg line="-Djava.awt.headless=true"/>
      <jvmarg line="-Xmx${heap.size}"/>
      <jvmarg line="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5006,suspend=n"/>
      <jvmarg line="-Dhost=localhost -DzkHost=localhost:${solr.cloud.zk.port} -DnumShards=${solr.cloud.num.shards}"/>
      <sysproperty key="jetty.port" value="${solr.cloud.port.2}"/>
      <sysproperty key="STOP.PORT" value="${solr.cloud.stop.port.2}"/>
      <sysproperty key="STOP.KEY" value="srsly.stop"/>
    </java>
  </target>
  
  <target name="run-solr-cloud-3">
    <sleep seconds="30"/>
    <!-- Give the leader a head start -->
    <tstamp>
      <format property="start.time" pattern="yyyy-MM-dd'T'hh:mm:ss"/>
    </tstamp>
    <property name="solr.log.3" location="${solr.cloud.dir.3}/solr-${start.time}.log"/>
    <echo message="Starting SolrCloud 3 on ${solr.cloud.port.3}, logging to ${solr.log.3}"/>
    <java dir="${solr.cloud.dir.3}" jar="${solr.cloud.dir.3}/jetty-start.jar" fork="true" failonerror="true" output="${solr.log.3}">
      <jvmarg line="-Djava.awt.headless=true"/>
      <jvmarg line="-Xmx${heap.size}"/>
      <jvmarg line="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5007,suspend=n"/>
      <jvmarg line="-Dhost=localhost -DzkHost=localhost:${solr.cloud.zk.port} -DnumShards=${solr.cloud.num.shards}"/>
      <sysproperty key="jetty.port" value="${solr.cloud.port.3}"/>
      <sysproperty key="STOP.PORT" value="${solr.cloud.stop.port.3}"/>
      <sysproperty key="STOP.KEY" value="srsly.stop"/>
    </java>
  </target>

  <target name="check-zk-status" if="${zk.down}">
    <echo>ZooKeeper failed to start. 
        See the log for details; this is usually caused by a port conflict, often when the previous instance of ZooKeeper had not yet released the port.</echo>
    <antcall target="stop-solr-cloud"/>
    <fail message="ZooKeeper failed to start"/>
  </target>

  <target name="get-zk-status">
     <exec executable="bash" failonerror="false" resultproperty="zk.result" outputproperty="zk.status">
       <arg value="-c"/>
       <arg value="echo -n 'stat' | nc localhost ${solr.cloud.zk.port}"/>
   </exec>
    <condition property="zk.down">
        <isfailure code="${zk.result}"/>
    </condition>
  </target>

  <target name="test-zk" description="see if ZooKeeper is running" depends="get-zk-status,check-zk-status">
    <echo message="ZooKeeper started successfully."/>
  </target>

  <target name="wait-and-test-zk">
      <sleep seconds="20"/>
      <antcall target="test-zk"/>
  </target>
  
  <target name="prep-zk" depends="get-zk, init">
    <untar src="${build-lib.dir}/zookeeper-${zk.version}.tar.gz" dest="${build.dir}" compression="gzip"/>
    <copy tofile="${zk.dir}/conf/zoo.cfg" overwrite="true">
      <fileset dir="${zk.conf.dir}" includes="zoo.cfg"/>
    </copy>
    <chmod file="${zk.dir}/bin/zkServer.sh" perm="u+x"/>
  </target>
  
  <target name="run-zk" depends="prep-zk" description="Run standalone ZooKeeper server">
    <exec dir="${zk.dir}/bin" executable="./zkServer.sh">
      <arg value="start"/>
    </exec>
  </target>
  
  <target name="stop-zk" depends="" description="Stop standalone ZooKeeper server">
    <exec dir="${zk.dir}/bin" executable="./zkServer.sh">
      <arg value="stop"/>
    </exec>
  </target>
  
  <target name="dist" depends="prep-solr, patch-solr" description="Create Solr Couchbase plugin package">
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}">
      <fileset dir="${build.dir}" includes="${ant.project.name}-${solr.couchbase.plugin.version}.jar"/>
    </copy>
    <mkdir dir="${dist.dir}/lib"/>
    <copy todir="${dist.dir}/lib">
      <fileset dir="${lib.dir}/solr.jetty" includes="*.jar"/>
      <fileset dir="${lib.dir}/runtime" includes="*"/>
    </copy>
    <mkdir dir="${dist.dir}/docs"/>
    <copy todir="${dist.dir}/docs">
      <fileset dir="${basedir}/docs">
        <include name="installation.txt" />
      </fileset>
    </copy>
    <mkdir dir="${dist.dir}/example"/>
    <copy todir="${dist.dir}/example">
      <fileset dir="${solr.dir}/solr">
        <include name="solr.xml" />
      </fileset>
      <fileset dir="${solr.dir}/solr/collection1/conf">
        <include name="solrconfig.xml" />
      </fileset>
    </copy>
    
    <tar longfile="gnu"
         destfile="${dist.dir}/${ant.project.name}-dist-${solr.couchbase.plugin.version}.tar.gz"
         compression="gzip">
      <tarfileset dir="${dist.dir}" filemode="644" username="ant" group="ant" prefix="${ant.project.name}">
        <include name="**/*" />
      </tarfileset>
    </tar>
  </target>
  
</project>